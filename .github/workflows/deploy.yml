name: Deploy infrastructure

on:
  push:
    branches:
      - develop

jobs:
  update-secrets:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Set Azure Credentials
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV


      - name: Set AWS Credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}" >> $GITHUB_ENV

      - name: Terraform Init
        working-directory: terraform/microservices
        run: terraform init

      - name: Terraform Apply
        working-directory: terraform/microservices
        run: terraform apply -auto-approve -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" -var="tenant_id=${{ secrets.AZURE_TENANT_ID }}" -var="client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" -var="client_id=${{ secrets.AZURE_CLIENT_ID }}"

      - name: Get Terraform Outputs
        id: tf_outputs
        working-directory: terraform/microservices
        run: |
          echo "acr_name=$(terraform output -raw acr_name)" >> $GITHUB_OUTPUT
          echo "acr_admin_username=$(terraform output -raw acr_admin_username)" >> $GITHUB_OUTPUT
          echo "acr_admin_password=$(terraform output -raw acr_admin_password)" >> $GITHUB_OUTPUT
          echo "acr_login_server=$(terraform output -raw acr_login_server)" >> $GITHUB_OUTPUT
          echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
          echo "container_app_environment_id=$(terraform output -raw container_app_environment_id)" >> $GITHUB_OUTPUT
          echo "identity_id=$(terraform output -raw identity_id)" >> $GITHUB_OUTPUT

      - name: Install GitHub CLI
        run: sudo apt-get install gh -y

      - name: Authenticate with GitHub CLI
        run: echo "${{ secrets.GH_PAT }}" | gh auth login --with-token

      - name: Set Terraform outputs as environment variables
        run: |
          echo "ACR_NAME=${{ steps.tf_outputs.outputs.acr_name }}" >> $GITHUB_ENV
          echo "DOCKER_USERNAME=${{ steps.tf_outputs.outputs.acr_admin_username }}" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD=${{ steps.tf_outputs.outputs.acr_admin_password }}" >> $GITHUB_ENV

      - name: Set Organization Secrets for multiple repositories
        run: |
          repos=("microservices-log-message-processor" "microservices-auth-api" "microservices-todo-api" "microservices-users-api" "microservices-frontend")
          for repo in "${repos[@]}"; do
            gh secret set DOCKERHUB_TOKEN -b "${{ secrets.DOCKERHUB_TOKEN }}" --repo "Microservices-app-todo/$repo"
            gh secret set DOCKERHUB_USERNAME -b "${{ secrets.DOCKERHUB_USERNAME }}" --repo "Microservices-app-todo/$repo"
            gh secret set ACR_NAME -b "${{ env.ACR_NAME }}" --repo "Microservices-app-todo/$repo"
            gh secret set DOCKER_USERNAME -b "${{ env.DOCKER_USERNAME }}" --repo "Microservices-app-todo/$repo"
            gh secret set DOCKER_PASSWORD -b "${{ env.DOCKER_PASSWORD }}" --repo "Microservices-app-todo/$repo"
          done
      - name: Trigger workflows and wait for completion
        run: |
          repos=("microservices-log-message-processor" "microservices-auth-api" "microservices-todo-api" "microservices-users-api" "microservices-frontend")
          declare -A run_ids

          # Step 1: Trigger workflows and collect run IDs
          for repo in "${repos[@]}"; do
            echo "üöÄ Triggering deploy.yml in $repo..."
            gh workflow run deploy.yml \
              --ref develop \
              --repo Microservices-app-todo/$repo

            # Small delay to allow the run to register
            sleep 5

            # Get the latest run ID for deploy.yml
            run_id=$(gh run list \
              --repo Microservices-app-todo/$repo \
              --workflow=deploy.yml \
              --branch=develop \
              --limit 1 \
              --json databaseId \
              --jq '.[0].databaseId')

            if [[ -n "$run_id" ]]; then
              run_ids[$repo]=$run_id
              echo "‚úÖ $repo run ID: $run_id"
            else
              echo "‚ùå Could not get run ID for $repo"
            fi
          done

          echo ""
          echo "‚è≥ Waiting for workflows to complete..."
          all_done=false

          # Step 2: Poll until all runs are completed
          while [ "$all_done" == "false" ]; do
            all_done=true
            for repo in "${!run_ids[@]}"; do
              run_id=${run_ids[$repo]}
              status=$(gh run view "$run_id" \
                --repo Microservices-app-todo/$repo \
                --json status,conclusion \
                --jq '.status')

              if [[ "$status" != "completed" ]]; then
                echo "‚è±Ô∏è  $repo is still running..."
                all_done=false
              else
                conclusion=$(gh run view "$run_id" \
                  --repo Microservices-app-todo/$repo \
                  --json status,conclusion \
                  --jq '.conclusion')
                echo "‚úÖ $repo finished with status: $conclusion"
              fi
            done

            if [ "$all_done" == "false" ]; then
              echo "üîÅ Waiting 15s before next check..."
              sleep 15
            fi
          done

          echo "üéâ All workflows completed."
      - name: Aca Terraform Init
        working-directory: terraform/container_apps
        run: terraform init

      - name: Aca Terraform Apply
        working-directory: terraform/container_apps
        run: terraform apply -auto-approve -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" -var="tenant_id=${{ secrets.AZURE_TENANT_ID }}" -var="client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" -var="client_id=${{ secrets.AZURE_CLIENT_ID }}" -var="acr_login_server=${{ steps.tf_outputs.outputs.acr_login_server }}" -var="resource_group_name=${{ steps.tf_outputs.outputs.resource_group_name }}" -var="container_app_environment_id=${{ steps.tf_outputs.outputs.container_app_environment_id }}" -var="identity_id=${{ steps.tf_outputs.outputs.identity_id }}"   
